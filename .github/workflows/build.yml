name: Build DevHaven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# 添加权限配置
permissions:
  contents: write

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, macos-latest, ubuntu-latest,    macos-13 ]

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 检查项目结构
        run: |
          echo "===== 项目根目录结构 ====="
          ls -la
          echo "===== package.json 内容预览 ====="
          cat package.json | grep -A 10 "scripts"
          echo "===== electron-builder.yml (如果存在) ====="
          cat electron-builder.yml || echo "文件不存在"
        shell: bash

      - name: 检查依赖锁文件
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            echo "pnpm-lock.yaml 文件存在"
            ls -la pnpm-lock.yaml
          else
            echo "错误: pnpm-lock.yaml 文件不存在"
            ls -la
            exit 1
          fi
        shell: bash

      - name: 安装pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: 设置Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: 安装依赖
        run: pnpm install

      # 输出环境信息
      - name: 输出环境信息
        run: |
          echo "Node版本: $(node -v)"
          echo "npm版本: $(npm -v)"
          echo "pnpm版本: $(pnpm -v)"
          npx electron-builder --version
        shell: bash

      # 设置构建环境
      - name: 设置Python环境 (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          python --version || python3 --version
          # 确保python命令可用
          which python || sudo ln -s $(which python3) /usr/local/bin/python
        shell: bash

      # 只在MacOS上启用代码签名（如果需要）
      - name: 设置MacOS代码签名（如果需要）
        if: startsWith(matrix.os, 'macos')
        run: |
          echo "如需代码签名，请在此处添加相关命令"
        shell: bash

      # 根据平台构建应用
      - name: 构建Windows应用
        if: startsWith(matrix.os, 'windows')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ls -la
          echo "===== 构建Windows应用 ====="
          if grep -q "build:win" package.json; then
            ELECTRON_BUILDER_LOGGING=debug pnpm build:win -- --publish never || {
              echo "pnpm脚本构建失败，尝试直接调用electron-builder..."
              npm run build && npx electron-builder --win --publish never || { echo "构建失败"; exit 1; }
            }
          else
            echo "使用直接调用electron-builder构建Windows应用"
            npm run build && npx electron-builder --win --publish never || { echo "构建失败"; exit 1; }
          fi
        shell: bash

      - name: 构建MacOS应用
        if: startsWith(matrix.os, 'macos')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ls -la
          echo "===== 构建MacOS应用 ====="
          # 如果build:mac:mas命令不存在，则回退到build:mac
          if grep -q "build:mac:mas" package.json; then
            ELECTRON_BUILDER_LOGGING=debug pnpm build:mac:mas -- --publish never || {
              echo "pnpm脚本构建失败，尝试直接调用electron-builder..."
              npm run build && npx electron-builder --mac --config.mac.identity=null --publish never || { echo "构建失败"; exit 1; }
            }
          else
            echo "使用直接调用electron-builder构建MacOS应用"
            npm run build && npx electron-builder --mac --config.mac.identity=null --publish never || { echo "构建失败"; exit 1; }
          fi
        shell: bash

      - name: 构建Linux应用
        if: startsWith(matrix.os, 'ubuntu')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ls -la
          echo "===== 构建Linux应用 ====="
          if grep -q "build:linux" package.json; then
            ELECTRON_BUILDER_LOGGING=debug pnpm build:linux -- --publish never || {
              echo "pnpm脚本构建失败，尝试直接调用electron-builder..."
              npm run build && npx electron-builder --linux --publish never || { echo "构建失败"; exit 1; }
            }
          else
            echo "使用直接调用electron-builder构建Linux应用"
            npm run build && npx electron-builder --linux --publish never || { echo "构建失败"; exit 1; }
          fi
        shell: bash

      # 上传构建产物
      - name: 上传Windows构建产物
        if: startsWith(matrix.os, 'windows')
        uses: actions/upload-artifact@v4
        with:
          name: devhaven-windows
          path: |
            dist_electron/*.exe
            dist_electron/latest.yml

      - name: 上传MacOS构建产物
        if: startsWith(matrix.os, 'macos')
        uses: actions/upload-artifact@v4
        with:
          name: devhaven-macos
          path: |
            dist_electron/*.dmg
            dist_electron/latest-mac.yml

      - name: 上传Linux构建产物
        if: startsWith(matrix.os, 'ubuntu')
        uses: actions/upload-artifact@v4
        with:
          name: devhaven-linux
          path: |
            dist_electron/*.AppImage
            dist_electron/latest-linux.yml

  # 创建GitHub Release并附加构建产物
  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 获取版本号
        id: package-version
        uses: martinbeentjes/npm-get-version-action@master

      - name: 删除已存在的标签和发布
        run: |
          # 删除本地标签
          git tag -d v${{ steps.package-version.outputs.current-version }} || true
          # 删除远程标签
          git push origin :refs/tags/v${{ steps.package-version.outputs.current-version }} || true
        continue-on-error: true

      - name: 创建标签
        run: |
          echo "Creating tag v${{ steps.package-version.outputs.current-version }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a v${{ steps.package-version.outputs.current-version }} -m "Release v${{ steps.package-version.outputs.current-version }}"
          git push origin v${{ steps.package-version.outputs.current-version }}
        continue-on-error: true

      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 重命名文件以添加时间戳
        run: |
          # 为Windows文件添加时间戳
          for file in artifacts/devhaven-windows/*.exe; do
            if [ -f "$file" ]; then
              timestamp=$(date +%Y%m%d%H%M%S)
              new_name=$(echo "$file" | sed "s/\.exe$/-${timestamp}.exe/")
              mv "$file" "$new_name"
            fi
          done

          # 为MacOS文件添加时间戳
          for file in artifacts/devhaven-macos/*.dmg; do
            if [ -f "$file" ]; then
              timestamp=$(date +%Y%m%d%H%M%S)
              new_name=$(echo "$file" | sed "s/\.dmg$/-${timestamp}.dmg/")
              mv "$file" "$new_name"
            fi
          done

          # 为Linux文件添加时间戳
          for file in artifacts/devhaven-linux/*.AppImage; do
            if [ -f "$file" ]; then
              timestamp=$(date +%Y%m%d%H%M%S)
              new_name=$(echo "$file" | sed "s/\.AppImage$/-${timestamp}.AppImage/")
              mv "$file" "$new_name"
            fi
          done
        shell: bash

      - name: 创建Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.package-version.outputs.current-version }}
          name: DevHaven v${{ steps.package-version.outputs.current-version }}
          draft: true
          files: |
            artifacts/devhaven-windows/*.exe
            artifacts/devhaven-windows/latest.yml
            artifacts/devhaven-macos/*.dmg
            artifacts/devhaven-macos/latest-mac.yml
            artifacts/devhaven-linux/*.AppImage
            artifacts/devhaven-linux/latest-linux.yml
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
